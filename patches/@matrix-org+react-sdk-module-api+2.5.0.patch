diff --git a/node_modules/@matrix-org/react-sdk-module-api/lib/ModuleApi.d.ts b/node_modules/@matrix-org/react-sdk-module-api/lib/ModuleApi.d.ts
index 917a7fc..a2710c6 100644
--- a/node_modules/@matrix-org/react-sdk-module-api/lib/ModuleApi.d.ts
+++ b/node_modules/@matrix-org/react-sdk-module-api/lib/ModuleApi.d.ts
@@ -37,7 +37,7 @@ export interface ModuleApi {
      * @returns Whether the user submitted the dialog or closed it, and the model returned by the
      * dialog component if submitted.
      */
-    openDialog<M extends object, P extends DialogProps = DialogProps, C extends DialogContent<P> = DialogContent<P>>(initialTitleOrOptions: string | ModuleUiDialogOptions, body: (props: P, ref: React.RefObject<C>) => React.ReactNode, props?: Omit<P, keyof DialogProps>): Promise<{
+    openDialog<M extends object, P extends DialogProps = DialogProps, C extends DialogContent<P> = DialogContent<P>>(initialTitleOrOptions: string | ModuleUiDialogOptions, body: (props: P, ref: React.RefObject<C | null>) => React.ReactNode, props?: Omit<P, keyof DialogProps>): Promise<{
         didOkOrSubmit: boolean;
         model: M;
     }>;
diff --git a/node_modules/@matrix-org/react-sdk-module-api/lib/lifecycles/CryptoSetupExtensions.js b/node_modules/@matrix-org/react-sdk-module-api/lib/lifecycles/CryptoSetupExtensions.js
index 5d422ed..b823add 100644
--- a/node_modules/@matrix-org/react-sdk-module-api/lib/lifecycles/CryptoSetupExtensions.js
+++ b/node_modules/@matrix-org/react-sdk-module-api/lib/lifecycles/CryptoSetupExtensions.js
@@ -124,34 +124,28 @@ var DefaultCryptoSetupExtensions = /*#__PURE__*/function (_CryptoSetupExtension)
   (0, _createClass2["default"])(DefaultCryptoSetupExtensions, [{
     key: "examineLoginResponse",
     value: function examineLoginResponse(response, credentials) {
-      console.log("Default empty examineLoginResponse() => void");
     }
   }, {
     key: "persistCredentials",
     value: function persistCredentials(credentials) {
-      console.log("Default empty persistCredentials() => void");
     }
   }, {
     key: "getSecretStorageKey",
     value: function getSecretStorageKey() {
-      console.log("Default empty getSecretStorageKey() => null");
       return null;
     }
   }, {
     key: "createSecretStorageKey",
     value: function createSecretStorageKey() {
-      console.log("Default empty createSecretStorageKey() => null");
       return null;
     }
   }, {
     key: "catchAccessSecretStorageError",
     value: function catchAccessSecretStorageError(e) {
-      console.log("Default catchAccessSecretStorageError() => void");
     }
   }, {
     key: "setupEncryptionNeeded",
     value: function setupEncryptionNeeded(args) {
-      console.log("Default setupEncryptionNeeded() => false");
       return false;
     }
   }, {
